name: front-actions
run-name: front-actions (@${{ github.triggering_actor }})

on:
  push:
    branches:
      - cloud

jobs:

  all-up: # [UP]
    name: Infra + front k8s up
    if: startsWith(github.event.head_commit.message, '[UP]')
    runs-on: ubuntu-latest
    environment: front
    steps:

    # Checkout de la rama. 
    - name: Checkout code 
      uses: actions/checkout@v3

    # Instala y configura Terraform CLI.
    - name: Terraform setup
      uses: hashicorp/setup-terraform@v2

    # Crea la infraestructura base en la nube.
    - name: Terraform init
      working-directory: src/terraform/00-base
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      run: |
        ls -lah

        bucket_name="spgda-bucket"

        prefix="state/base"

        terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix

        terraform validate

        terraform plan -lock=false

        terraform apply -lock=false --auto-approve
    
    # Configura Google Cloud.
    - name: Google Cloud authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
    - name: Google Cloud SDK setup
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: '>= 363.0.0'
        install_components: 'kubectl'
    - name: GCloud config
      run: |
        gcloud info

        gcloud components list

        gcloud container clusters get-credentials primary --region=us-central1-a
  
    # Despliega los objectos en la nube.
    - name: Kubernetes deploy
      working-directory: src/k8s
      env:
        TLS_SECRET_YAML: ${{ secrets.TLS_SECRET_YAML }}
      run: |
        ls -lah

        set -e

        echo "Se aplicarán los cambios de todos los archivos de configuración Kubernetes..."

        kubectl apply \
          -f 01-deploy-front.yaml \
          -f 02-service-front.yaml \
          -f 03-nginx-ingress/common/ns-and-sa.yaml \
          -f 03-nginx-ingress/rbac/rbac.yaml

        # Crea los secretos para el certificado TLS, si no existen.
        TLS_SECRETS_OBJ=$(kubectl get secret tls-secrets --ignore-not-found)
        if [[ -z $TLS_SECRETS_OBJ ]]; then
        
          echo "Se crearán los secretos para el certificado TLS..."

          echo "$TLS_SECRET_YAML" > tls-secrets.yaml
          kubectl apply -f tls-secrets.yaml

          echo "Secretos creados."

        fi

        echo "Se aplicarán los cambios del Ingress..."
        kubectl apply \
          -f 03-nginx-ingress/common/nginx-config.yaml \
          -f 03-nginx-ingress/common/ingress-class.yaml \
          -f 03-nginx-ingress/common/crds/k8s.nginx.org_virtualservers.yaml \
          -f 03-nginx-ingress/common/crds/k8s.nginx.org_virtualserverroutes.yaml \
          -f 03-nginx-ingress/common/crds/k8s.nginx.org_transportservers.yaml \
          -f 03-nginx-ingress/common/crds/k8s.nginx.org_policies.yaml \
          -f 03-nginx-ingress/deployment/nginx-ingress.yaml \
          -f 03-nginx-ingress/app-ingress.yaml \
          -f 03-nginx-ingress/back-ingress.yaml

        kubectl apply -f 03-nginx-ingress/service/loadbalancer.yaml

        echo "Todos los cambios de Kubernetes fueron aplicados."

        # Espera hasta que el controlador esté listo [https://kubernetes.github.io/ingress-nginx/deploy/#pre-flight-check].
        echo "Se verifica que el controlador nginx esté listo..."
        kubectl wait --namespace nginx-ingress \
          --for=condition=ready pod \
          --selector=app=nginx-ingress \
          --timeout=120s
        echo "Controlador listo."

    # Configura los servidores de nombre de dominio.
    - name: Terraform DNS config
      working-directory: src/terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      run: |
        ls -lah

        bucket_name="spgda-bucket"

        prefix="state/dns"

        terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix

        terraform validate

        sudo apt-get install jq
        
        echo "Verificando que balanceador de cargas esté activo..."

        until 
          kubectl get service nginx-ingress --namespace=nginx-ingress
        do
          echo
          echo "El balanceador de cargas no está activo aún..."
          echo
          sleep 10
        done

        while 
          LOADBALANCER_IP=$(kubectl get -o json service nginx-ingress --namespace=nginx-ingress | jq -r .status.loadBalancer.ingress\[0\].ip)
          [ $LOADBALANCER_IP = null ]
        do
          echo
          echo "Todavía no se pudo obtener la IP pública del balanceador de cargas..."
          echo
          sleep 10
        done

        echo
        echo "IP pública del balanceador de cargas = $LOADBALANCER_IP."
        echo

        export TF_VAR_CLOUDFLARE_EMAIL=${{ secrets.CF_API_EMAIL }}
        export TF_VAR_CLOUDFLARE_API_KEY=${{ secrets.CF_API_KEY }}
        export TF_VAR_LOADBALANCER_IP=$LOADBALANCER_IP

        terraform plan -lock=false

        terraform apply -lock=false --auto-approve
   
  all-down: # [DOWN]
    name: Infra down
    if: startsWith(github.event.head_commit.message, '[DOWN]')
    runs-on: ubuntu-latest
    environment: front
    steps:

      # Checkout de la rama.
      - name: Checkout code 
        uses: actions/checkout@v3

      # Instala y configura Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Configura Google Cloud.
      - name: Google Cloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Google Cloud SDK setup
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'
          install_components: 'kubectl'
      - name: GCloud config
        run: |
          gcloud info

          gcloud components list

          gcloud container clusters get-credentials primary --region=us-central1-a

      # Destruye la infraestructura en la nube.
      - name: Terraform destroy state/dns
        working-directory: src/terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          ls -lah

          bucket_name="spgda-bucket"

          prefix="state/dns"

          sudo apt-get install jq
        
          LOADBALANCER_IP=$(kubectl get -o json service nginx-ingress --namespace=nginx-ingress | jq -r .status.loadBalancer.ingress\[0\].ip)

          export TF_VAR_CLOUDFLARE_EMAIL=${{ secrets.CF_API_EMAIL }}
          export TF_VAR_CLOUDFLARE_API_KEY=${{ secrets.CF_API_KEY }}
          export TF_VAR_LOADBALANCER_IP=$LOADBALANCER_IP

          terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix

          terraform destroy -lock=false --auto-approve

      # Destruye la infraestructura en la nube.
      - name: Terraform destroy state/base
        working-directory: src/terraform/00-base
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          ls -lah

          bucket_name="spgda-bucket"

          prefix="state/base"

          terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix

          terraform destroy -lock=false --auto-approve